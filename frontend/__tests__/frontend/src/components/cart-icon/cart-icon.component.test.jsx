// ********RoostGPT********
// Test generated by RoostGPT for test cart-react using AI Type Open AI and AI Model gpt-4-turbo-2024-04-09



// ********RoostGPT********
// Import dependencies
import React from 'react';
import { mount } from 'enzyme';
import configureStore from 'redux-mock-store';
import { Provider } from 'react-redux';
import CartIcon from '../../../../../../frontend/src/components/cart-icon/cart-icon.component';

// Redux mock store setup
const initialState = { cart: { cartItemsCount: 5 } };
const mockStore = configureStore();
const store = mockStore(initialState);

// Mock Redux hooks
jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useSelector: jest.fn().mockImplementation(selector => selector(initialState)),
  useDispatch: () => jest.fn()
}));

describe('CartIcon Component', () => {
  let wrapper;
  const mockToggleCartHidden = jest.fn();

  beforeEach(() => {
    const mockProps = {
      toggleCartHidden: mockToggleCartHidden
    };

    wrapper = mount(
      <Provider store={store}>
        <CartIcon {...mockProps} />
      </Provider>
    );
  });

  test('should render CartIcon component', () => {
    expect(wrapper.find(CartIcon).length).toEqual(1);
  });

  test('should call toggleCartHidden when icon is clicked', () => {
    wrapper.find('.cart-icon').simulate('click');
    expect(mockToggleCartHidden).toHaveBeenCalled();
  });

  test('should render an itemCount equal to the cartItemsCount prop', () => {
    const itemCount = parseInt(wrapper.find('.item-count').text());
    expect(itemCount).toBe(5);
  });
});

