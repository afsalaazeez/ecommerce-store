// ********RoostGPT********
// Test generated by RoostGPT for test cart-react using AI Type Open AI and AI Model gpt-4-turbo-2024-04-09



// ********RoostGPT********
import React from 'react';
import { render, fireEvent, cleanup } from '@testing-library/react';
import CartItem from '../../../../../../frontend/src/components/cart-item/cart-item.component';

describe('CartItem Component', () => {
  let dummyItem;

  beforeAll(() => {
    dummyItem = {
      id: 1,
      imageUrl: 'test-image.jpg',
      price: 100,
      name: 'Test Product',
      quantity: 3
    };
  });

  beforeEach(() => {
  });

  afterEach(() => {
    cleanup();
  });

  afterAll(() => {
  });

  test('should render CartItem correctly with props', () => {
    const { getByTestId } = render(<CartItem item={dummyItem} />);
    const nameElement = getByTestId('product-name');
    const priceElement = getByTestID('product-price');
    const quantityElement = getByTestId('product-quantity');
    
    expect(nameElement.textContent).toBe('Test Product');
    expect(priceElement.textContent).toBe('$100');
    expect(quantityElement.textContent).toBe('Quantity: 3');
  });

  test('should update component when props change', () => {
    const { getByTestId, rerender } = render(<CartItem item={dummyItem} />);
    dummyItem.quantity = 4;
    rerender(<CartItem item={dummyItem} />);

    const quantityElement = getByTestId('product-quantity');
    expect(quantityElement.textContent).toBe('Quantity: 4');
  });

  test('should handle empty object without crashing', () => {
    const { getByTestId } = render(<CartItem item={{}} />);

    const nameElement = getByTestId('product-name');
    const priceElement = getByTestId('product-price');
    const quantityElement = getByTestId('product-quantity');

    expect(nameElement.textContent).toBe('');
    expect(priceElement.textContent).toBe('');
    expect(quantityElement.textContent).toBe('');
  });
});

