// ********RoostGPT********
// Test generated by RoostGPT for test cart-react using AI Type Open AI and AI Model gpt-4-turbo-2024-04-09



// ********RoostGPT********
import React from 'react';
import { shallow, mount } from 'enzyme';
import { Provider } from 'react-redux';
import configureStore from '../../../redux/store';
import { BrowserRouter as Router } from 'react-router-dom';
import SignIn from '../../../../../frontend/src/components/sign-in/sign-in.component';

describe('SignIn Component', () => {
  let wrapper;
  let mockLoginUser = jest.fn();
  const mockHistory = { push: jest.fn() };
  const initialState = { email: '', password: '' };

  beforeEach(() => {
    const store = configureStore();
    wrapper = mount(
      <Provider store={store}>
        <Router>
          <SignIn loginUser={mockLoginLoginUser} history={mockHistory} />
        </Router>
      </Provider>
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('renders SignIn component correctly', () => {
    expect(wrapper.find('.sign-in').exists()).toBe(true);
  });

  test('email and password input fields are initially empty', () => {
    expect(wrapper.find('input[name="email"]').prop('value')).toBe('');
    expect(wrapper.find('input[name="password"]').prop('value')).toBe('');
  });

  test('should handle input change', () => {
    wrapper.find('input[name="email"]').simulate('change', {
      target: { name: 'email', value: 'test@example.com' }
    });

    wrapper.update();

    expect(wrapper.find('input[name="email"]').prop('value')).toBe('test@example.com');
  });

  test('calls loginUser on form submit', () => {
    const form = wrapper.find('form');
    form.simulate('submit');
    expect(mockLoginUser).toHaveBeenCalled();
  });

  test('redirect on successful login', () => {
    const redirectState = { ...initialState, redirect: true };
    mockLoginUser.mockImplementation(() => redirectState);

    wrapper.find('form').simulate('submit');
    expect(mockHistory.push).toHaveBeenCalledWith('/');
  });
});

