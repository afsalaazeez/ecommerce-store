// ********RoostGPT********
// Test generated by RoostGPT for test cart-react using AI Type Open AI and AI Model gpt-4-turbo-2024-04-09



// ********RoostGPT********
// Import the reducer and action types
import productsReducer from '../../../../../frontend/src/redux/products/products.reducer';
import { ADD_PRODUCT, REMOVE_PRODUCT, UPDATE_PRODUCT } from '../../../../../frontend/src/redux/products/products.actionTypes';

describe('productsReducer', () => {
    const initialState = {
        products: []
    };

    it('should return the initial state when no action is passed', () => {
        const returnedState = productsReducer(undefined, {});
        expect(returnedState).toEqual(initialState);
    });

    it('should handle ADD_PRODUCT action', () => {
        const newProduct = { id: 1, title: 'New Product', price: 99.99 };
        const addAction = { type: ADD_PRODUCT, payload: newProduct };
        const returnedState = productsReducer(initialState, addAction);
        expect(returningState.products).toContain(newProduct);
    });

    it('should handle REMOVE_PRODUCT action', () => {
        const currentState = { products: [{ id: 1, title: 'Unwanted Product', price: 15.00 }] };
        const removeAction = { type: REMOVE_PRODUCT, payload: 1 };
        const returningState = productsReducer(currentState, removeAction);
        expect(returningState.products).toEqual([]);
    });

    it('should handle UPDATE_PRODUCT action', () => {
        const currentState = { products: [{ id: 1, title: 'Old Product', price: 20.00 }] };
        const updatedProduct = { id: 1, title: 'Updated Product', price: 30.00 };
        const updateAction = { type: UPDATE_PRODUCT, payload: updatedProduct };
        const returningState = productsReducer(currentState, updateAction);
        expect(returningState.products[0]).toEqual(updatedProduct);
    });
});

