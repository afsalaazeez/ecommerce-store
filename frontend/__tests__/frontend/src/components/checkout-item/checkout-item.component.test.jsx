// ********RoostGPT********
// Test generated by RoostGPT for test cart-react using AI Type Open AI and AI Model gpt-4-turbo-2024-04-09



// ********RoostGPT********
import React from 'react';
import { Provider } from 'react-redux';
import { render, fireEvent } from '@testing-library/react';
import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';
import CheckoutItem from '../../../../../frontend/src/components/checkout-item/checkout-item.component';

const mockStore = configureStore({ reducer: {}, middleware: getDefaultMiddleware() });

describe('CheckoutItem Component', () => {
  let store, wrapper;
  
  beforeEach(() => {
    store = mockStore({}); 
    wrapper = (component) => render(
      <Provider store={store}>
        {component}
      </Provider>
    );
  });

  test('should render CheckoutItem component', () => {
    const item = { imageUrl: "url", price: 10, name: 'Test Item', quantity: 3 };
    const { getByText, getByAltText } = wrapper(<CheckoutItem cartItem={item} clearItem={jest.fn()} addItem={jest.fn()} removeItem={jest.fn()} />);
    expect(getByText('Test Item')).toBeInTheDocument();
    expect(getByText('3')).toBeInTheDocument();
    expect(getByText('$10')).toBeInTheDocument();
    expect(getByAltText('item')).toHaveAttribute('src', 'url');
  });

  test('should handle add item', () => {
    const addItemMock = jest.fn();
    const item = { imageUrl: "url", price: 10, name: 'Test Item', quantity: 3 };
    
    const { getByText } = wrapper(<CheckoutItem cartItem={item} clearItem={jest.fn()} addItem={addItemMock} removeItem={jest.fn()} />);
    fireEvent.click(getByText('➡'));
    expect(addItemMock).toHaveBeenCalledWith(item);
  });

  test('should handle remove item', () => {
    const removeItemMock = jest.fn();
    const item = { imageUrl: "url", price: 10, name: 'Test Item', quantity: 3 };

    const { getByText } = wrapper(<CheckoutItem cartItem={item} clearItem={jest.fn()} addItem={jest.fn()} removeItem={removeItemMock} />);
    fireEvent.click(getByText('⬅'));
    expect(removeItemMock).toHaveBeenCalledWith(item);
  });

  test('should handle clear item', () => {
    const clearItemMock = jest.fn();
    const item = { imageUrl: "url", price: 10, name: 'Test Item', quantity: 3 };

    const { getByText } = wrapper(<CheckoutItem cartItem={item} clearItem={clearItemMock} addItem={jest.fn()} removeItem={jest.fn()} />);
    fireEvent.click(getByText('✖'));
    expect(clearItemMock).toHaveBeenCalledWith(item);
  });
});

